{"version":3,"sources":["webpack:///./src/pinmux/components/OutputViews/Editor/Editor.tsx"],"names":["_","__webpack_require__","React","monaco","platform_1","utils_1","themes_1","colors_1","ComponentUtils_1","module","exports","Component","[object Object]","this","reSizeEditor","height","getHeight","standardEditorNode","style","isEclipse","defaultFontSize","diffEditorNode","hasError","diffType","props","createElement","ref","divRef","id","display","fileType","getFileType","pastModel","editor","createModel","presentModel","diffEditor","createDiffEditor","automaticLayout","readOnly","lineNumbers","isUnderTest","renderSideBySide","fontSize","setModel","original","modified","onDidUpdateDiff","firstDiff","first","getLineChanges","revealLineInCenter","min","modifiedStartLineNumber","originalStartLineNumber","defineTheme","base","inherit","rules","colors","editor.background","tiGrey","editor.lineHighlightBackground","theme","name","setTheme","assertUnreachable","standardEditor","create","model","minimap","enabled","setEditorValue","window","addEventListener","dispose","removeEventListener","prevProps","propsChanged","newOptions","updateOptions","isEqual","currentContent","previousContent","getValue","setValue","file","split","pop","toLowerCase"],"mappings":"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","file":"LazyEditor.bundle.js","sourcesContent":["import * as _ from \"lodash\";\nimport React = require(\"react\");\nimport * as monaco from \"monaco-editor/esm/vs/editor/editor.api\";\nimport { IEditorProps } from \"./IEditor\";\nimport { isUnderTest, isEclipse } from \"../../../services/platform\";\nimport { EditorDiffType } from \"../../../services/userPreferences\";\nimport { assertUnreachable } from \"../../../services/utils\";\nimport { defaultFontSize, ThemeType } from \"../../styles/themes\";\nimport { tiGrey } from \"../../styles/colors\";\nimport { getHeight } from \"../../ComponentUtils\";\n\nclass Editor extends React.Component<IEditorProps> {\n\t// HTML refs that the editors will attach to.\t\n\t// These elements must be empty.\n\tprivate standardEditorNode: HTMLDivElement;\n\tprivate diffEditorNode: HTMLDivElement;\n\n\t// The editor objects\n\tprivate standardEditor: monaco.editor.IStandaloneCodeEditor;\n\tprivate diffEditor: monaco.editor.IStandaloneDiffEditor;\n\n\t// The text models (the contents)\n\tprivate presentModel: monaco.editor.ITextModel;\n\tprivate pastModel: monaco.editor.ITextModel;\n\n\tpublic render() {\n\t\tconst { hasError, diffType } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div ref={(divRef) => this.standardEditorNode = divRef} id={\"editor\"}\n\t\t\t\t\tstyle={(hasError || diffType !== EditorDiffType.NODIFF)\n\t\t\t\t\t\t? { display: \"none\" } : {}}></div>\n\t\t\t\t<div ref={(divRef) => this.diffEditorNode = divRef} id={\"diff_editor\"}\n\t\t\t\t\tstyle={(hasError || diffType === EditorDiffType.NODIFF)\n\t\t\t\t\t\t? { display: \"none\" } : {}}></div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic componentDidMount() {\n\t\tconst fileType = this.getFileType();\n\n\t\tthis.pastModel = monaco.editor.createModel(\"\", fileType);\n\t\tthis.presentModel = monaco.editor.createModel(\"\", fileType);\n\n\t\t// create diff editor\n\t\tthis.diffEditor =\n\t\t\tmonaco.editor.createDiffEditor(\n\t\t\t\tthis.diffEditorNode,\n\t\t\t\t{\n\t\t\t\t\tautomaticLayout: true,\n\t\t\t\t\treadOnly: true,\n\t\t\t\t\tlineNumbers: isUnderTest() ? \"off\" : \"on\",\n\t\t\t\t\trenderSideBySide: this.props.diffType === EditorDiffType.SIDEBYSIDE,\n\t\t\t\t\tfontSize: defaultFontSize,\n\t\t\t\t},\n\t\t\t);\n\t\tthis.diffEditor.setModel({\n\t\t\toriginal: this.pastModel,\n\t\t\tmodified: this.presentModel,\n\t\t});\n\t\tthis.diffEditor.onDidUpdateDiff(() => {\n\t\t\tconst firstDiff = _.first(this.diffEditor.getLineChanges());\n\t\t\tif (firstDiff) {\n\t\t\t\tthis.diffEditor.revealLineInCenter(\n\t\t\t\t\t_.min([firstDiff.modifiedStartLineNumber, firstDiff.originalStartLineNumber]),\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tmonaco.editor.defineTheme(\"darkTheme\", {\n\t\t\tbase: \"vs-dark\",\n\t\t\tinherit: true,\n\t\t\trules: [],\n\t\t\tcolors: {\n\t\t\t\t\"editor.background\": tiGrey[800],\n\t\t\t\t\"editor.lineHighlightBackground\": \"#4D4D4F\",\n\t\t\t},\n\t\t});\n\n\t\tmonaco.editor.defineTheme(\"lightTheme\", {\n\t\t\tbase: \"vs\",\n\t\t\tinherit: true,\n\t\t\trules: [],\n\t\t\tcolors: {\n\t\t\t},\n\t\t});\n\n\t\tif (this.props.theme.name === ThemeType.DARK) {\n\t\t\tmonaco.editor.setTheme(\"darkTheme\");\n\t\t} else if (this.props.theme.name === ThemeType.LIGHT) {\n\t\t\tmonaco.editor.setTheme(\"lightTheme\");\n\t\t} else {\n\t\t\tassertUnreachable(this.props.theme.name);\n\t\t}\n\n\t\t// create standard editor\n\t\tthis.standardEditor =\n\t\t\tmonaco.editor.create(\n\t\t\t\tthis.standardEditorNode,\n\t\t\t\t{\n\t\t\t\t\tautomaticLayout: true,\n\t\t\t\t\treadOnly: true,\n\t\t\t\t\tmodel: this.presentModel,\n\t\t\t\t\tlineNumbers: isUnderTest() ? \"off\" : \"on\",\n\t\t\t\t\tminimap: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t},\n\t\t\t\t\tfontSize: defaultFontSize,\n\t\t\t\t},\n\t\t\t);\n\n\t\tthis.setEditorValue();\n\t\tthis.reSizeEditor();\n\t\twindow.addEventListener(\"resize\", this.reSizeEditor);\n\t}\n\n\t// Destroy the editor so we don't leak\n\n\tpublic componentWillUnmount() {\n\t\tthis.standardEditor.dispose();\n\t\tthis.diffEditor.dispose();\n\t\tthis.pastModel.dispose();\n\t\tthis.presentModel.dispose();\n\t\twindow.removeEventListener(\"resize\", this.reSizeEditor);\n\t}\n\n\tpublic componentDidUpdate(prevProps: Readonly<IEditorProps>) {\n\t\tif (this.propsChanged(prevProps)) {\n\t\t\tthis.setEditorValue();\n\t\t\tif (this.props.diffType !== prevProps.diffType) {\n\t\t\t\tconst newOptions: monaco.editor.IDiffEditorOptions\n\t\t\t\t\t= { renderSideBySide: this.props.diffType === EditorDiffType.SIDEBYSIDE };\n\t\t\t\tthis.diffEditor.updateOptions(newOptions);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate propsChanged(prevProps: Readonly<IEditorProps>) {\n\t\treturn !_.isEqual(this.props, prevProps);\n\t}\n\n\tprivate reSizeEditor = () => {\n\t\tconst height = getHeight();\n\t\t// adjusting the height of the editor according to the screen size\n\t\tthis.standardEditorNode.style.height = (height - (isEclipse() ? 60 : defaultFontSize * 8.5)) + \"px\";\n\t\tthis.diffEditorNode.style.height = (height - (isEclipse() ? 60 : defaultFontSize * 8.5)) + \"px\";\n\t}\n\n\tprivate setEditorValue() {\n\t\tif (!this.props.hasError && this.props.currentContent) {\n\t\t\tif (this.props.previousContent !== this.pastModel.getValue()) {\n\t\t\t\tthis.pastModel.setValue(this.props.previousContent);\n\t\t\t}\n\t\t\tif (this.props.currentContent !== this.presentModel.getValue()) {\n\t\t\t\tthis.presentModel.setValue(this.props.currentContent);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getFileType() {\n\t\tconst fileExt = this.props.file.name.split(\".\").pop().toLowerCase();\n\t\tswitch (fileExt) {\n\t\t\tcase \"js\":\n\t\t\tcase \"xs\":\t// xs is for ROV RTSC scripts\n\t\t\tcase \"syscfg\":\n\t\t\t\treturn \"javascript\";\n\t\t\tcase \"json\":\n\t\t\t\treturn \"json\";\n\t\t\tcase \"c\":\n\t\t\tcase \"h\":\n\t\t\t\treturn \"c\";\n\t\t\tcase \"cpp\":\n\t\t\tcase \"hpp\":\n\t\t\t\treturn \"cpp\";\n\t\t\tdefault:\n\t\t\t\treturn \"plaintext\";\n\t\t}\n\t}\n}\n\nexport = Editor;\n"],"sourceRoot":""}
