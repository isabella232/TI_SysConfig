{"version":3,"sources":["webpack:///./src/pinmux/components/OutputViews/Editor/Editor.tsx","webpack:///./src/node_builtins/real_promise.js"],"names":["Editor","React","Component","scrollAfterRender","reSizeEditor","height","getHeight","this","standardEditorNode","style","isEclipse","defaultFontSize","diffEditorNode","scrollToFirstDifference","props","diffType","firstDiff","_","first","diffEditor","getLineChanges","revealLineInCenterIfOutsideViewport","min","modifiedStartLineNumber","originalStartLineNumber","setImmediate","hasError","ref","divRef","id","display","fileType","getFileType","pastModel","monaco","editor","createModel","presentModel","createDiffEditor","automaticLayout","readOnly","lineNumbers","isUnderTest","renderSideBySide","fontSize","setModel","original","modified","subscription","onDidUpdateDiff","defineTheme","base","inherit","rules","colors","tiGrey","theme","name","setTheme","assertUnreachable","standardEditor","create","model","minimap","enabled","setEditorValue","window","addEventListener","dispose","removeEventListener","prevProps","propsChanged","newOptions","updateOptions","isEqual","currentContent","previousContent","getValue","setValue","file","split","pop","toLowerCase","module","exports","ti_testing_originalPromise","Promise"],"mappings":"wGAAA,aACA,OACA,UAEA,QAEA,OACA,SACA,SACA,SAEA,MAAMA,UAAeC,EAAMC,UAA3B,c,oBAES,KAAAC,mBAAoB,EAyJpB,KAAAC,aAAe,KACtB,MAAMC,EAAS,EAAAC,YAEfC,KAAKC,mBAAmBC,MAAMJ,OAAUA,GAAU,EAAAK,YAAc,GAAuB,IAAlB,EAAAC,iBAA0B,KAC/FJ,KAAKK,eAAeH,MAAMJ,OAAUA,GAAU,EAAAK,YAAc,GAAuB,IAAlB,EAAAC,iBAA0B,MAkCpF,KAAAE,wBAA0B,KACjC,GAA4B,IAAxBN,KAAKO,MAAMC,SAAoC,CAClD,MAAMC,EAAYC,EAAEC,MAAMX,KAAKY,WAAWC,kBACtCJ,GACHT,KAAKY,WAAWE,oCACfJ,EAAEK,IAAI,CAACN,EAAUO,wBAAyBP,EAAUQ,6BApLxC,SAWXjB,KAAKJ,oBACRI,KAAKJ,mBAAoB,EACzBsB,EAAa,KACZlB,KAAKM,6BAMP,MAAM,SAAEa,EAAQ,SAAEX,GAAaR,KAAKO,MACpC,OACC,2BACC,uBAAKa,IAAMC,GAAWrB,KAAKC,mBAAqBoB,EAAQC,GAAI,SAC3DpB,MAAQiB,GAAyB,IAAbX,EACjB,CAAEe,QAAS,QAAW,KAC1B,uBAAKH,IAAMC,GAAWrB,KAAKK,eAAiBgB,EAAQC,GAAI,cACvDpB,MAAQiB,GAAyB,IAAbX,EACjB,CAAEe,QAAS,QAAW,MAKb,oBACf,MAAMC,EAAWxB,KAAKyB,cAEtBzB,KAAK0B,UAAYC,EAAOC,OAAOC,YAAY,GAAIL,GAC/CxB,KAAK8B,aAAeH,EAAOC,OAAOC,YAAY,GAAIL,GAGlDxB,KAAKY,WACJe,EAAOC,OAAOG,iBACb/B,KAAKK,eACL,CACC2B,iBAAiB,EACjBC,UAAU,EACVC,YAAa,EAAAC,cAAgB,MAAQ,KACrCC,iBAA0C,IAAxBpC,KAAKO,MAAMC,SAC7B6B,SAAU,EAAAjC,kBAGbJ,KAAKY,WAAW0B,SAAS,CACxBC,SAAUvC,KAAK0B,UACfc,SAAUxC,KAAK8B,eAEhB9B,KAAKyC,aAAezC,KAAKY,WAAW8B,gBAAgB1C,KAAKM,yBAEzDqB,EAAOC,OAAOe,YAAY,YAAa,CACtCC,KAAM,UACNC,SAAS,EACTC,MAAO,GACPC,OAAQ,CACP,oBAAqB,EAAAC,OAAO,KAC5B,iCAAkC,aAIpCrB,EAAOC,OAAOe,YAAY,aAAc,CACvCC,KAAM,KACNC,SAAS,EACTC,MAAO,GACPC,OAAQ,KAIqB,SAA1B/C,KAAKO,MAAM0C,MAAMC,KACpBvB,EAAOC,OAAOuB,SAAS,aACa,UAA1BnD,KAAKO,MAAM0C,MAAMC,KAC3BvB,EAAOC,OAAOuB,SAAS,cAEvB,EAAAC,kBAAkBpD,KAAKO,MAAM0C,MAAMC,MAIpClD,KAAKqD,eACJ1B,EAAOC,OAAO0B,OACbtD,KAAKC,mBACL,CACC+B,iBAAiB,EACjBC,UAAU,EACVsB,MAAOvD,KAAK8B,aACZI,YAAa,EAAAC,cAAgB,MAAQ,KACrCqB,QAAS,CACRC,SAAS,GAEVpB,SAAU,EAAAjC,kBAIbJ,KAAK0D,iBACL1D,KAAKH,eACL8D,OAAOC,iBAAiB,SAAU5D,KAAKH,cAKxB,uBACfG,KAAKyC,aAAaoB,UAClB7D,KAAKqD,eAAeQ,UACpB7D,KAAKY,WAAWiD,UAChB7D,KAAK0B,UAAUmC,UACf7D,KAAK8B,aAAa+B,UAClBF,OAAOG,oBAAoB,SAAU9D,KAAKH,cAG3B,mBAAmBkE,GAClC,GAAI/D,KAAKgE,aAAaD,KACrB/D,KAAK0D,iBACD1D,KAAKO,MAAMC,WAAauD,EAAUvD,UAAU,CAC/C,MAAMyD,EACH,CAAE7B,iBAA0C,IAAxBpC,KAAKO,MAAMC,UAClCR,KAAKY,WAAWsD,cAAcD,GAKH,IAAvBF,EAAUvD,WACbR,KAAKJ,mBAAoB,IAMrB,aAAamE,GACpB,OAAQrD,EAAEyD,QAAQnE,KAAKO,MAAOwD,GAUvB,kBACF/D,KAAKO,MAAMY,UAAYnB,KAAKO,MAAM6D,iBAClCpE,KAAKO,MAAM8D,kBAAoBrE,KAAK0B,UAAU4C,YACjDtE,KAAK0B,UAAU6C,SAASvE,KAAKO,MAAM8D,iBAEhCrE,KAAKO,MAAM6D,iBAAmBpE,KAAK8B,aAAawC,YACnDtE,KAAK8B,aAAayC,SAASvE,KAAKO,MAAM6D,iBAKjC,cAEP,OADgBpE,KAAKO,MAAMiE,KAAKtB,KAAKuB,MAAM,KAAKC,MAAMC,eAErD,IAAK,KACL,IAAK,KACL,IAAK,SACJ,MAAO,aACR,IAAK,OACJ,MAAO,OACR,IAAK,IACL,IAAK,IACJ,MAAO,IACR,IAAK,MACL,IAAK,MACJ,MAAO,MACR,QACC,MAAO,cAgBX,UAASlF,I,mDCxNTmF,EAAOC,QAAgD,oBAA/BC,2BAA6CC,QAAUD","file":"LazyEditor.bundle.js","sourcesContent":["import * as _ from \"lodash\";\nimport React = require(\"react\");\nimport * as monaco from \"monaco-editor/esm/vs/editor/editor.api\";\nimport { IEditorProps } from \"./IEditor\";\nimport { isUnderTest, isEclipse } from \"../../../services/platform\";\nimport { EditorDiffType } from \"../../../services/userPreferences\";\nimport { assertUnreachable } from \"../../../services/utils\";\nimport { defaultFontSize, ThemeType } from \"../../styles/themes\";\nimport { tiGrey } from \"../../styles/colors\";\nimport { getHeight } from \"../../ComponentUtils\";\n\nclass Editor extends React.Component<IEditorProps> {\n\n\tprivate scrollAfterRender = false;\n\t// HTML refs that the editors will attach to.\t\n\t// These elements must be empty.\n\tprivate standardEditorNode: HTMLDivElement;\n\tprivate diffEditorNode: HTMLDivElement;\n\n\t// The editor objects\n\tprivate standardEditor: monaco.editor.IStandaloneCodeEditor;\n\tprivate diffEditor: monaco.editor.IStandaloneDiffEditor;\n\n\t// The text models (the contents)\n\tprivate presentModel: monaco.editor.ITextModel;\n\tprivate pastModel: monaco.editor.ITextModel;\n\n\tprivate subscription: monaco.IDisposable;\n\n\tpublic override render() {\n\n\t\t// Unfortunately we can't scroll until the div is rendered.  If we do, then it will scroll it right to the very\n\t\t// top, which a) hides the diff and b) might scroll most of the text off screen.  However, React gives no \n\t\t// \"post-render\" event, and monaco gives no \"onRender\" event, so the only option is to set a variable and\n\t\t// scroll in a setImmediate.\n\n\t\t// I'm using a member, and not React state, as setting React state would trigger an extra React render, so \n\t\t// React doesn't even let you set it.  Thus it has to be outside of React, and that's ok because we're updating\n\t\t// monaco which is outside of react\n\n\t\tif (this.scrollAfterRender) {\n\t\t\tthis.scrollAfterRender = false;\n\t\t\tsetImmediate(() => {\n\t\t\t\tthis.scrollToFirstDifference();\n\t\t\t});\n\t\t}\n\n\t\t// Now render the divs that monaco will attach to\n\n\t\tconst { hasError, diffType } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div ref={(divRef) => this.standardEditorNode = divRef} id={\"editor\"}\n\t\t\t\t\tstyle={(hasError || diffType !== EditorDiffType.NODIFF)\n\t\t\t\t\t\t? { display: \"none\" } : {}}></div>\n\t\t\t\t<div ref={(divRef) => this.diffEditorNode = divRef} id={\"diff_editor\"}\n\t\t\t\t\tstyle={(hasError || diffType === EditorDiffType.NODIFF)\n\t\t\t\t\t\t? { display: \"none\" } : {}}></div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpublic override componentDidMount() {\n\t\tconst fileType = this.getFileType();\n\n\t\tthis.pastModel = monaco.editor.createModel(\"\", fileType);\n\t\tthis.presentModel = monaco.editor.createModel(\"\", fileType);\n\n\t\t// create diff editor\n\t\tthis.diffEditor =\n\t\t\tmonaco.editor.createDiffEditor(\n\t\t\t\tthis.diffEditorNode,\n\t\t\t\t{\n\t\t\t\t\tautomaticLayout: true,\n\t\t\t\t\treadOnly: true,\n\t\t\t\t\tlineNumbers: isUnderTest() ? \"off\" : \"on\",\n\t\t\t\t\trenderSideBySide: this.props.diffType === EditorDiffType.SIDEBYSIDE,\n\t\t\t\t\tfontSize: defaultFontSize,\n\t\t\t\t},\n\t\t\t);\n\t\tthis.diffEditor.setModel({\n\t\t\toriginal: this.pastModel,\n\t\t\tmodified: this.presentModel,\n\t\t});\n\t\tthis.subscription = this.diffEditor.onDidUpdateDiff(this.scrollToFirstDifference);\n\n\t\tmonaco.editor.defineTheme(\"darkTheme\", {\n\t\t\tbase: \"vs-dark\",\n\t\t\tinherit: true,\n\t\t\trules: [],\n\t\t\tcolors: {\n\t\t\t\t\"editor.background\": tiGrey[800],\n\t\t\t\t\"editor.lineHighlightBackground\": \"#4D4D4F\",\n\t\t\t},\n\t\t});\n\n\t\tmonaco.editor.defineTheme(\"lightTheme\", {\n\t\t\tbase: \"vs\",\n\t\t\tinherit: true,\n\t\t\trules: [],\n\t\t\tcolors: {\n\t\t\t},\n\t\t});\n\n\t\tif (this.props.theme.name === ThemeType.DARK) {\n\t\t\tmonaco.editor.setTheme(\"darkTheme\");\n\t\t} else if (this.props.theme.name === ThemeType.LIGHT) {\n\t\t\tmonaco.editor.setTheme(\"lightTheme\");\n\t\t} else {\n\t\t\tassertUnreachable(this.props.theme.name);\n\t\t}\n\n\t\t// create standard editor\n\t\tthis.standardEditor =\n\t\t\tmonaco.editor.create(\n\t\t\t\tthis.standardEditorNode,\n\t\t\t\t{\n\t\t\t\t\tautomaticLayout: true,\n\t\t\t\t\treadOnly: true,\n\t\t\t\t\tmodel: this.presentModel,\n\t\t\t\t\tlineNumbers: isUnderTest() ? \"off\" : \"on\",\n\t\t\t\t\tminimap: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t},\n\t\t\t\t\tfontSize: defaultFontSize,\n\t\t\t\t},\n\t\t\t);\n\n\t\tthis.setEditorValue();\n\t\tthis.reSizeEditor();\n\t\twindow.addEventListener(\"resize\", this.reSizeEditor);\n\t}\n\n\t// Destroy the editor so we don't leak\n\n\tpublic override componentWillUnmount() {\n\t\tthis.subscription.dispose();\n\t\tthis.standardEditor.dispose();\n\t\tthis.diffEditor.dispose();\n\t\tthis.pastModel.dispose();\n\t\tthis.presentModel.dispose();\n\t\twindow.removeEventListener(\"resize\", this.reSizeEditor);\n\t}\n\n\tpublic override componentDidUpdate(prevProps: Readonly<IEditorProps>) {\n\t\tif (this.propsChanged(prevProps)) {\n\t\t\tthis.setEditorValue();\n\t\t\tif (this.props.diffType !== prevProps.diffType) {\n\t\t\t\tconst newOptions: monaco.editor.IDiffEditorOptions\n\t\t\t\t\t= { renderSideBySide: this.props.diffType === EditorDiffType.SIDEBYSIDE };\n\t\t\t\tthis.diffEditor.updateOptions(newOptions);\n\n\t\t\t\t// We are about to display the diff editor - set state so we scroll AFTER it's rendered.  See render()\n\t\t\t\t// for more details\n\n\t\t\t\tif (prevProps.diffType === EditorDiffType.NODIFF) {\n\t\t\t\t\tthis.scrollAfterRender = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate propsChanged(prevProps: Readonly<IEditorProps>) {\n\t\treturn !_.isEqual(this.props, prevProps);\n\t}\n\n\tprivate reSizeEditor = () => {\n\t\tconst height = getHeight();\n\t\t// adjusting the height of the editor according to the screen size\n\t\tthis.standardEditorNode.style.height = (height - (isEclipse() ? 60 : defaultFontSize * 8.5)) + \"px\";\n\t\tthis.diffEditorNode.style.height = (height - (isEclipse() ? 60 : defaultFontSize * 8.5)) + \"px\";\n\t}\n\n\tprivate setEditorValue() {\n\t\tif (!this.props.hasError && this.props.currentContent) {\n\t\t\tif (this.props.previousContent !== this.pastModel.getValue()) {\n\t\t\t\tthis.pastModel.setValue(this.props.previousContent);\n\t\t\t}\n\t\t\tif (this.props.currentContent !== this.presentModel.getValue()) {\n\t\t\t\tthis.presentModel.setValue(this.props.currentContent);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getFileType() {\n\t\tconst fileExt = this.props.file.name.split(\".\").pop().toLowerCase();\n\t\tswitch (fileExt) {\n\t\t\tcase \"js\":\n\t\t\tcase \"xs\":\t// xs is for ROV RTSC scripts\n\t\t\tcase \"syscfg\":\n\t\t\t\treturn \"javascript\";\n\t\t\tcase \"json\":\n\t\t\t\treturn \"json\";\n\t\t\tcase \"c\":\n\t\t\tcase \"h\":\n\t\t\t\treturn \"c\";\n\t\t\tcase \"cpp\":\n\t\t\tcase \"hpp\":\n\t\t\t\treturn \"cpp\";\n\t\t\tdefault:\n\t\t\t\treturn \"plaintext\";\n\t\t}\n\t}\n\n\tprivate scrollToFirstDifference = () => {\n\t\tif (this.props.diffType !== EditorDiffType.NODIFF) {\n\t\t\tconst firstDiff = _.first(this.diffEditor.getLineChanges());\n\t\t\tif (firstDiff) {\n\t\t\t\tthis.diffEditor.revealLineInCenterIfOutsideViewport(\n\t\t\t\t\t_.min([firstDiff.modifiedStartLineNumber, firstDiff.originalStartLineNumber]),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport = Editor;\n","module.exports = typeof ti_testing_originalPromise === \"undefined\" ? Promise : ti_testing_originalPromise;"],"sourceRoot":""}
