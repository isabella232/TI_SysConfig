defineResource("/TM4C123x/templates/csv/summary.csv.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var $legacy = pmux.getScript("/legacy/adapt.js")(pmux), assignmentErrors = $legacy.assignmentErrors, assignments = $legacy.assignments, peripheralConfigurables = $legacy.peripheralConfigurables, peripheralConfigurations = $legacy.peripheralConfigurations, selectedUseCases = $legacy.selectedUseCases, version = $legacy.version, deviceData = $legacy.deviceData;

	var gpioType = function( assignment ) {
		if( assignment.input ) {
			return "Input";
		} else if( assignment.output ) {
			return "Output";
		} else if( assignment.outputOpenDrain ) {
			return "Output OD";
		} else {
			return "";
		}
	};
;
__p += 'Pin#, PORT IO, Function, Pull Down, Pull Up, Direction, User Name\n';
 for( var i = 0; i < assignments.length; ++i ) {
;
__p +=
((__t = (assignments[i].devicePin.ball)) == null ? '' : __t) +
', ' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
', ' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
', ' +
((__t = (assignments[i].pd)) == null ? '' : __t) +
', ' +
((__t = (assignments[i].pu)) == null ? '' : __t) +
', ' +
((__t = (gpioType( assignments[i] ))) == null ? '' : __t) +
', ' +
((__t = (assignments[i].requirementName)) == null ? '' : __t) +
'\n';
 }
;

return __p
}; });
defineResource("/TM4C123x/templates/driverlib/pinout.c.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var $legacy = pmux.getScript("/legacy/adapt.js")(pmux), assignmentErrors = $legacy.assignmentErrors, assignments = $legacy.assignments, peripheralConfigurables = $legacy.peripheralConfigurables, peripheralConfigurations = $legacy.peripheralConfigurations, selectedUseCases = $legacy.selectedUseCases, version = $legacy.version, deviceData = $legacy.deviceData;

   
    var date = new Date();
		
    var getGPIOPortName = function( assignment ) {
        return ( ( assignment.devicePin.designSignalName )[1] );
    };
    
    var getGPIOPinNumber = function( assignment ) {
        return ( ( assignment.devicePin.designSignalName )[2] );
    };
 
    var getGPIOPortLookup = function( assignment ) {
		if( getGPIOPortName( assignment ) === "A" ) {
		return "0";
		} else if( getGPIOPortName( assignment ) === "B" ) {
		return "1";
		} else if( getGPIOPortName( assignment ) === "C" ) {
		return "2";
		} else if( getGPIOPortName( assignment ) === "D" ) {
		return "3";
		} else if( getGPIOPortName( assignment ) === "E" ) {
		return "4";
		} else if( getGPIOPortName( assignment ) === "F" ) {
		return "5";
		} else if( getGPIOPortName( assignment ) === "G" ) {
		return "6";
		} else if( getGPIOPortName( assignment ) === "H" ) {
		return "7";
		} else if( getGPIOPortName( assignment ) === "J" ) {
		return "8";
		} else if( getGPIOPortName( assignment ) === "K" ) {
		return "9";
		} else if( getGPIOPortName( assignment ) === "L" ) {
		return "10";
		} else if( getGPIOPortName( assignment ) === "M" ) {
		return "11";
		} else if( getGPIOPortName( assignment ) === "N" ) {
		return "12";
		} else if( getGPIOPortName( assignment ) === "P" ) {
		return "13";
		} else if( getGPIOPortName( assignment ) === "Q" ) {
		return "14";
		} else if( getGPIOPortName( assignment ) === "R" ) {
		return "15";
		} else if( getGPIOPortName( assignment ) === "S" ) {
		return "16";
		} else if( getGPIOPortName( assignment ) === "T" ) {
		return "17";
		}
    };

    var getLOCKPin = function( assignment ) {
        if( assignment.devicePin.designSignalName === "PC0" ) {
        return "LOCK";
        } else if( assignment.devicePin.designSignalName === "PC1" ) {
        return "LOCK";
        } else if( assignment.devicePin.designSignalName === "PC2" ) {
        return "LOCK";
        } else if( assignment.devicePin.designSignalName === "PC3" ) {
        return "LOCK";
        } else if( assignment.devicePin.designSignalName === "PD7" ) {
        return "LOCK";
        } else if( assignment.devicePin.designSignalName === "PF0" ) {
        return "LOCK";
		}
    };

    var getI2CPinType = function( assignment ) {
        if( ( assignment.peripheralPin.name.match( /I2C[0-9]+SCL/ ) ) ) {
        return "SCL";
		}
        if( ( assignment.peripheralPin.name.match( /I2C[0-9]+SDA/ ) ) ) {
        return "SDA";
		}
    };

    var getComparatorPinType = function( assignment ) {
        if( ( assignment.peripheralPin.name.match( /C[0-2]O/ ) ) ) {
        return "DIG";
		} else {
        return "ANA";
		}
    };

    var getEthernetPinType = function( assignment ) {
        if( ( assignment.peripheralPin.name.match( /EN0LED[0-2]+/ ) ) ) {
        return "LED";
		} else {
        return "PHY";
		}
    };
	
    var getGPIOPinType = function( assignment ) {
        if( assignment.input ) {
            return "INPUT";
        } else if( assignment.output ) {
            return "OUTPUT";
        } else {
            return "OUTPUTOD";
        }
    };

    var getGPIOPinValue = function( assignment ) {
        if( assignment.pu ) {
            return "HIGH";
        } else if( assignment.pd ) {
            return "LOW";
        }
    };

    var getUSBPinType = function( assignment ) {
        if( ( assignment.peripheralPin.name.match( /USB0DM/ ) ) ) {
        return "ANA";
        } else if( ( assignment.peripheralPin.name.match( /USB0DP/ ) ) ) {
        return "ANA";
        } else if( ( assignment.peripheralPin.name.match( /USB0ID/ ) ) ) {
        return "ANA";
        } else if( ( assignment.peripheralPin.name.match( /USB0VBUS/ ) ) ) {
        return "ANA";
		} else {
        return "DIG";
		}
    };

;
__p += '//*****************************************************************************\n//\n// Configure the device pins for different signals\n//\n// Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com/ \n// \n// \n//  Redistribution and use in source and binary forms, with or without \n//  modification, are permitted provided that the following conditions \n//  are met:\n//\n//    Redistributions of source code must retain the above copyright \n//    notice, this list of conditions and the following disclaimer.\n//\n//    Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the \n//    documentation and/or other materials provided with the   \n//    distribution.\n//\n//    Neither the name of Texas Instruments Incorporated nor the names of\n//    its contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//*****************************************************************************\n\n// This file was automatically generated on ' +
((__t = (date.toLocaleDateString())) == null ? '' : __t) +
' at ' +
((__t = (date.toLocaleTimeString())) == null ? '' : __t) +
'\n// by TI PinMux version ' +
((__t = (version)) == null ? '' : __t) +
'\n//\n//*****************************************************************************\n\n#include <stdbool.h>\n#include <stdint.h>\n#include "inc/hw_gpio.h"\n#include "inc/hw_memmap.h"\n#include "inc/hw_types.h"\n#include "driverlib/gpio.h"\n#include "driverlib/pin_map.h"\n#include "driverlib/rom.h"\n#include "driverlib/rom_map.h"\n#include "driverlib/sysctl.h"\n#include "pinout.h"\n\n//*****************************************************************************\n//\n//! \\addtogroup pinout_api\n//! @{\n//\n//*****************************************************************************\n\n//*****************************************************************************\n//\n//! Configures the device pins for the customer specific usage.\n//!\n//! \\return None.\n//\n//*****************************************************************************\nvoid\nPinoutSet(void)\n{\n    //\n    // Enable Peripheral Clocks \n    //\n';
 var arrayPortStatus = [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0  ];
 var arrayPortName   = ["A","B","C","D","E","F","G","H","J","K","L","M","N","P","Q","R","S","T" ];
 for( var i = 0; i < assignments.length; ++i ) {
	var getPortNumber = getGPIOPortLookup( assignments[i] );
 if( arrayPortStatus[getPortNumber] === 0 ) {
   arrayPortStatus[getPortNumber] += 1;
 }
 }
 for( var i = 0; i < 18; ++i ) {
 if( arrayPortStatus[i] === 1 ) {
;
__p += '	MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIO' +
((__t = (arrayPortName[i])) == null ? '' : __t) +
');\n';
 }
 } 
;
__p += '\n';
 for( var i = 0; i < assignments.length; ++i ) {
	if( getLOCKPin( assignments[i] ) === "LOCK" ) {
;
__p += '	//\n	// Unlock the Port Pin and Set the Commit Bit\n	//\n	HWREG(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE+GPIO_O_LOCK) = GPIO_LOCK_KEY;\n	HWREG(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE+GPIO_O_CR)   |= GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
';\n	HWREG(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE+GPIO_O_LOCK) = 0x0;\n	\n';
	}
;
__p += '    //\n    // Configure the GPIO Pin Mux for P' +
((__t = (getGPIOPortName( assignments[i] ))) == null ? '' : __t) +
'' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
'\n	// for ' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
'\n    //\n';
	if( assignments[i].interfaceName === "I2C" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n';
		if( getI2CPinType( assignments[i] ) === "SCL" ) {
;
__p += '	MAP_GPIOPinTypeI2CSCL(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
		}
		if( getI2CPinType( assignments[i] ) === "SDA" ) {
;
__p += '	MAP_GPIOPinTypeI2C(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
		}
	} else if( assignments[i].interfaceName === "ADC" ) {
;
__p += '	MAP_GPIOPinTypeADC(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "CAN" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeCAN(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "Comparator" ) {
		if( getComparatorPinType( assignments[i] ) === "ANA" ) {
;
__p += '	MAP_GPIOPinTypeComparator(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
		}
		if( getComparatorPinType( assignments[i] ) === "DIG" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	GPIOPinTypeComparatorOutput(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
		}
	} else if( assignments[i].interfaceName === "GPIO" ) {
		if( getGPIOPinType( assignments[i] ) === "INPUT" ) {
;
__p += '	MAP_GPIOPinTypeGPIOInput(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
			if( getGPIOPinValue( assignments[i] ) === "LOW" ) {
;
__p += '	MAP_GPIOPadConfigSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);\n';
			} else if( getGPIOPinValue( assignments[i] ) === "HIGH" ) {
;
__p += '	MAP_GPIOPadConfigSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);\n';
			}
		} else if( getGPIOPinType( assignments[i] ) === "OUTPUT" ) {
;
__p += '	MAP_GPIOPinTypeGPIOOutput(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
			if( getGPIOPinValue( assignments[i] ) === "LOW" ) {
;
__p += '	MAP_GPIOPinWrite(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', 0x0);\n';
			} else if( getGPIOPinValue( assignments[i] ) === "HIGH" ) {
;
__p += '	MAP_GPIOPinWrite(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
			}
		} else if( getGPIOPinType( assignments[i] ) === "OUTPUTOD" ) {
;
__p += '	MAP_GPIOPinTypeGPIOOutputOD(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
			if( getGPIOPinValue( assignments[i] ) === "HIGH" ) {
;
__p += '	MAP_GPIOPadConfigSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);\n';
			}
		}
	} else if( assignments[i].interfaceName === "HIBERNATE" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n    GPIODirModeSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_DIR_MODE_HW);\n    GPIOPadConfigSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD);\n';
	} else if( assignments[i].interfaceName === "NMI" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n    GPIODirModeSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_DIR_MODE_HW);\n    GPIOPadConfigSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD);\n';
	} else if( assignments[i].interfaceName === "PWM" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypePWM(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "QEI" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeQEI(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "SSI" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeSSI(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "Timer" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeTimer(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "TRACE" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n    GPIODirModeSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_DIR_MODE_HW);\n    GPIOPadConfigSet(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
', GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD);\n';
	} else if( assignments[i].interfaceName === "UART" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeUART(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
	} else if( assignments[i].interfaceName === "USB" ) {
		if( getUSBPinType( assignments[i] ) === "ANA" ) {
;
__p += '	MAP_GPIOPinTypeUSBAnalog(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
		}
		if( getUSBPinType( assignments[i] ) === "DIG" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeUSBDigital(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
		}
	} else if( assignments[i].interfaceName === "WTimer" ) {
;
__p += '	MAP_GPIOPinConfigure(GPIO_' +
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
'_' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
');\n	MAP_GPIOPinTypeTimer(GPIO_PORT' +
((__t = (getGPIOPortName( assignments[i]))) == null ? '' : __t) +
'_BASE, GPIO_PIN_' +
((__t = (getGPIOPinNumber( assignments[i] ))) == null ? '' : __t) +
');\n';
   }
;
__p += '\n';
 } 
;
__p += '}\n\n//*****************************************************************************\n//\n// Close the Doxygen group.\n//! @}\n//\n//*****************************************************************************\n\n';
return __p
}; });
defineResource("/TM4C123x/templates/driverlib/pinout.h.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var $legacy = pmux.getScript("/legacy/adapt.js")(pmux), assignmentErrors = $legacy.assignmentErrors, assignments = $legacy.assignments, peripheralConfigurables = $legacy.peripheralConfigurables, peripheralConfigurations = $legacy.peripheralConfigurations, selectedUseCases = $legacy.selectedUseCases, version = $legacy.version, deviceData = $legacy.deviceData;
;
__p += '//*****************************************************************************\n// pinout.h\n//\n// configure the device pins for different signals\n//\n// Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com/ \n// \n// \n//  Redistribution and use in source and binary forms, with or without \n//  modification, are permitted provided that the following conditions \n//  are met:\n//\n//    Redistributions of source code must retain the above copyright \n//    notice, this list of conditions and the following disclaimer.\n//\n//    Redistributions in binary form must reproduce the above copyright\n//    notice, this list of conditions and the following disclaimer in the \n//    documentation and/or other materials provided with the   \n//    distribution.\n//\n//    Neither the name of Texas Instruments Incorporated nor the names of\n//    its contributors may be used to endorse or promote products derived\n//    from this software without specific prior written permission.\n//\n//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n//  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n//  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n//  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n//  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n//*****************************************************************************\n\n';
 var date = new Date();
;
__p += '// This file was automatically generated on ' +
((__t = (date.toLocaleDateString())) == null ? '' : __t) +
' at ' +
((__t = (date.toLocaleTimeString())) == null ? '' : __t) +
'\n// by TI PinMux version ' +
((__t = (version)) == null ? '' : __t) +
'\n//\n//*****************************************************************************\n\n#ifndef __DRIVERS_PINOUT_H__\n#define __DRIVERS_PINOUT_H__\n\n//*****************************************************************************\n//\n// If building with a C++ compiler, make all of the definitions in this header\n// have a C binding.\n//\n//*****************************************************************************\n#ifdef __cplusplus\nextern "C"\n{\n#endif\n\n//*****************************************************************************\n//\n// Prototypes.\n//\n//*****************************************************************************\nextern void PinoutSet(void);\n\n//*****************************************************************************\n//\n// Mark the end of the C bindings section for C++ compilers.\n//\n//*****************************************************************************\n#ifdef __cplusplus\n}\n#endif\n\n#endif // __DRIVERS_PINOUT_H__\n';
return __p
}; });