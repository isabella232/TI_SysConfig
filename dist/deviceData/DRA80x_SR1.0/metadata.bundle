// This bundle was auto-generated on 2021-4-8 at 16:39:36
// From the folders: 
// /home/xgbsesvc/jenkins/jenkins/workspace/sysconfig.build.installers/pinmux/out/dist/deviceData/DRA80x_SR1.0
defineResource("/DRA80x_SR1.0/templates/Platform Development Kit (PDK)/DRA80x_pinmux.h.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var date = new Date();
;
__p += '/**\n * Note: This file was auto-generated by TI PinMux on ' +
((__t = (date.toLocaleDateString())) == null ? '' : __t) +
' at ' +
((__t = (date.toLocaleTimeString())) == null ? '' : __t) +
'.\n *\n * \\file   DRA80x_pinmux.h\n *\n * \\brief  This file contains pad configure register offsets and bit-field \n *         value macros for different configurations,\n *\n *           BIT[20:19]		BUFFERCLASS		set the pin\'s output driver characteristics\n *           BIT[18]		RXACTIVE		enable the pin\'s input buffer (typically kept enabled)\n *           BIT[17]		PULLTYPESEL		set the iternal resistor pull direction high or low (if enabled)\n *           BIT[16]		PULLUDEN		internal resistor disable (0 = enabled / 1 = disabled)\n *           BIT[3:0]		MUXMODE			select the desired function on the given pin\n *\n *  \\copyright Copyright (CU) ' +
((__t = (date.getFullYear())) == null ? '' : __t) +
' Texas Instruments Incorporated - \n *             http://www.ti.com/\n */\n\n#ifndef _DRA80X_PIN_MUX_H_\n#define _DRA80X_PIN_MUX_H_\n\n/* ========================================================================== */\n/*                             Include Files                                  */\n/* ========================================================================== */\n\n#include "pinmux.h"\n#include "csl_types.h"\n\n#ifdef __cplusplus\nextern "C" {\n#endif\n\n/* ========================================================================== */\n/*                           Macros & Typedefs                                */\n/* ========================================================================== */\n#define PIN_MODE(mode)	                (mode)\n#define PINMUX_END                      (-1)\n\n/** \\brief Active mode configurations */\n/** \\brief Resistor disable */\n#define PIN_PULL_DISABLE                (0x1U << 16U)  \n/** \\brief Pull direction */\n#define	PIN_PULL_DIRECTION              (0x1U << 17U)\n/** \\brief Receiver enable */\n#define	PIN_INPUT_ENABLE                (0x1U << 18U)\n/** \\brief Driver disable */\n#define	PIN_OUTPUT_DISABLE              (0x1U << 21U)\n/** \\brief Wakeup enable */\n#define	PIN_WAKEUP_ENABLE               (0x1U << 29U)\n\n\n\n/** \\brief Pad config register offset in control module */\nenum pinMainOffsets\n{\n    PIN_GPMC0_AD0              = 0x0000U,\n    PIN_GPMC0_AD1              = 0x0004U,\n    PIN_GPMC0_AD2              = 0x0008U,\n    PIN_GPMC0_AD3              = 0x000CU,\n    PIN_GPMC0_AD4              = 0x0010U,\n    PIN_GPMC0_AD5              = 0x0014U,\n    PIN_GPMC0_AD6              = 0x0018U,\n    PIN_GPMC0_AD7              = 0x001CU,\n    PIN_GPMC0_AD8              = 0x0020U,\n    PIN_GPMC0_AD9              = 0x0024U,\n    PIN_GPMC0_AD10             = 0x0028U,\n    PIN_GPMC0_AD11             = 0x002CU,\n    PIN_GPMC0_AD12             = 0x0030U,\n    PIN_GPMC0_AD13             = 0x0034U,\n    PIN_GPMC0_AD14             = 0x0038U,\n    PIN_GPMC0_AD15             = 0x003CU,\n    PIN_GPMC0_CLK              = 0x0040U,\n    PIN_GPMC0_ADVN_ALE         = 0x0044U,\n    PIN_GPMC0_OEN_REN          = 0x0048U,\n    PIN_GPMC0_WEN              = 0x004CU,\n    PIN_GPMC0_BE0N_CLE         = 0x0050U,\n    PIN_GPMC0_BE1N             = 0x0054U,\n    PIN_GPMC0_WAIT0            = 0x0058U,\n    PIN_GPMC0_WAIT1            = 0x005CU,\n    PIN_GPMC0_WPN              = 0x0060U,\n    PIN_GPMC0_DIR              = 0x0064U,\n    PIN_GPMC0_CSN0             = 0x0068U,\n    PIN_GPMC0_CSN1             = 0x006CU,\n    PIN_GPMC0_CSN2             = 0x0070U,\n    PIN_GPMC0_CSN3             = 0x0074U,\n    PIN_PRG2_PRU0_GPO0         = 0x0078U,\n    PIN_PRG2_PRU0_GPO1         = 0x007CU,\n    PIN_PRG2_PRU0_GPO2         = 0x0080U,\n    PIN_PRG2_PRU0_GPO3         = 0x0084U,\n    PIN_PRG2_PRU0_GPO4         = 0x0088U,\n    PIN_PRG2_PRU0_GPO5         = 0x008CU,\n    PIN_PRG2_PRU0_GPO6         = 0x0090U,\n    PIN_PRG2_PRU0_GPO7         = 0x0094U,\n    PIN_PRG2_PRU0_GPO8         = 0x0098U,\n    PIN_PRG2_PRU0_GPO9         = 0x009CU,\n    PIN_PRG2_PRU0_GPO10        = 0x00A0U,\n    PIN_PRG2_PRU0_GPO11        = 0x00A4U,\n    PIN_PRG2_PRU0_GPO16        = 0x00A8U,\n    PIN_PRG2_PRU1_GPO0         = 0x00ACU,\n    PIN_PRG2_PRU1_GPO1         = 0x00B0U,\n    PIN_PRG2_PRU1_GPO2         = 0x00B4U,\n    PIN_PRG2_PRU1_GPO3         = 0x00B8U,\n    PIN_PRG2_PRU1_GPO4         = 0x00BCU,\n    PIN_PRG2_PRU1_GPO5         = 0x00C0U,\n    PIN_PRG2_PRU1_GPO6         = 0x00C4U,\n    PIN_PRG2_PRU1_GPO7         = 0x00C8U,\n    PIN_PRG2_PRU1_GPO8         = 0x00CCU,\n    PIN_PRG2_PRU1_GPO9         = 0x00D0U,\n    PIN_PRG2_PRU1_GPO10        = 0x00D4U,\n    PIN_PRG2_PRU1_GPO11        = 0x00D8U,\n    PIN_PRG2_PRU1_GPO16        = 0x00DCU,\n    PIN_PRG1_PRU0_GPO0         = 0x00E0U,\n    PIN_PRG1_PRU0_GPO1         = 0x00E4U,\n    PIN_PRG1_PRU0_GPO2         = 0x00E8U,\n    PIN_PRG1_PRU0_GPO3         = 0x00ECU,\n    PIN_PRG1_PRU0_GPO4         = 0x00F0U,\n    PIN_PRG1_PRU0_GPO5         = 0x00F4U,\n    PIN_PRG1_PRU0_GPO6         = 0x00F8U,\n    PIN_PRG1_PRU0_GPO7         = 0x00FCU,\n    PIN_PRG1_PRU0_GPO8         = 0x0100U,\n    PIN_PRG1_PRU0_GPO9         = 0x0104U,\n    PIN_PRG1_PRU0_GPO10        = 0x0108U,\n    PIN_PRG1_PRU0_GPO11        = 0x010CU,\n    PIN_PRG1_PRU0_GPO12        = 0x0110U,\n    PIN_PRG1_PRU0_GPO13        = 0x0114U,\n    PIN_PRG1_PRU0_GPO14        = 0x0118U,\n    PIN_PRG1_PRU0_GPO15        = 0x011CU,\n    PIN_PRG1_PRU0_GPO16        = 0x0120U,\n    PIN_PRG1_PRU0_GPO17        = 0x0124U,\n    PIN_PRG1_PRU0_GPO18        = 0x0128U,\n    PIN_PRG1_PRU0_GPO19        = 0x012CU,\n    PIN_PRG1_PRU1_GPO0         = 0x0130U,\n    PIN_PRG1_PRU1_GPO1         = 0x0134U,\n    PIN_PRG1_PRU1_GPO2         = 0x0138U,\n    PIN_PRG1_PRU1_GPO3         = 0x013CU,\n    PIN_PRG1_PRU1_GPO4         = 0x0140U,\n    PIN_PRG1_PRU1_GPO5         = 0x0144U,\n    PIN_PRG1_PRU1_GPO6         = 0x0148U,\n    PIN_PRG1_PRU1_GPO7         = 0x014CU,\n    PIN_PRG1_PRU1_GPO8         = 0x0150U,\n    PIN_PRG1_PRU1_GPO9         = 0x0154U,\n    PIN_PRG1_PRU1_GPO10        = 0x0158U,\n    PIN_PRG1_PRU1_GPO11        = 0x015CU,\n    PIN_PRG1_PRU1_GPO12        = 0x0160U,\n    PIN_PRG1_PRU1_GPO13        = 0x0164U,\n    PIN_PRG1_PRU1_GPO14        = 0x0168U,\n    PIN_PRG1_PRU1_GPO15        = 0x016CU,\n    PIN_PRG1_PRU1_GPO16        = 0x0170U,\n    PIN_PRG1_PRU1_GPO17        = 0x0174U,\n    PIN_PRG1_PRU1_GPO18        = 0x0178U,\n    PIN_PRG1_PRU1_GPO19        = 0x017CU,\n    PIN_PRG1_MDIO0_MDIO        = 0x0180U,\n    PIN_PRG1_MDIO0_MDC         = 0x0184U,\n    PIN_MMC0_DAT7              = 0x0188U,\n    PIN_MMC0_DAT6              = 0x018CU,\n    PIN_MMC0_DAT5              = 0x0190U,\n    PIN_MMC0_DAT4              = 0x0194U,\n    PIN_MMC0_DAT3              = 0x0198U,\n    PIN_MMC0_DAT2              = 0x019CU,\n    PIN_MMC0_DAT1              = 0x01A0U,\n    PIN_MMC0_DAT0              = 0x01A4U,\n    PIN_MMC0_CLK               = 0x01A8U,\n    PIN_MMC0_CMD               = 0x01ACU,\n    PIN_MMC0_DS                = 0x01B0U,\n    PIN_MMC0_SDCD              = 0x01B4U,\n    PIN_MMC0_SDWP              = 0x01B8U,\n    PIN_SPI0_CS0               = 0x01BCU,\n    PIN_SPI0_CS1               = 0x01C0U,\n    PIN_SPI0_CLK               = 0x01C4U,\n    PIN_SPI0_D0                = 0x01C8U,\n    PIN_SPI0_D1                = 0x01CCU,\n    PIN_SPI1_CS0               = 0x01D0U,\n    PIN_SPI1_CS1               = 0x01D4U,\n    PIN_SPI1_CLK               = 0x01D8U,\n    PIN_SPI1_D0                = 0x01DCU,\n    PIN_SPI1_D1                = 0x01E0U,\n    PIN_UART0_RXD              = 0x01E4U,\n    PIN_UART0_TXD              = 0x01E8U,\n    PIN_UART0_CTSN             = 0x01ECU,\n    PIN_UART0_RTSN             = 0x01F0U,\n    PIN_PRG0_PRU0_GPO0         = 0x01F4U,\n    PIN_PRG0_PRU0_GPO1         = 0x01F8U,\n    PIN_PRG0_PRU0_GPO2         = 0x01FCU,\n    PIN_PRG0_PRU0_GPO3         = 0x0200U,\n    PIN_PRG0_PRU0_GPO4         = 0x0204U,\n    PIN_PRG0_PRU0_GPO5         = 0x0208U,\n    PIN_PRG0_PRU0_GPO6         = 0x020CU,\n    PIN_PRG0_PRU0_GPO7         = 0x0210U,\n    PIN_PRG0_PRU0_GPO8         = 0x0214U,\n    PIN_PRG0_PRU0_GPO9         = 0x0218U,\n    PIN_PRG0_PRU0_GPO10        = 0x021CU,\n    PIN_PRG0_PRU0_GPO11        = 0x0220U,\n    PIN_PRG0_PRU0_GPO12        = 0x0224U,\n    PIN_PRG0_PRU0_GPO13        = 0x0228U,\n    PIN_PRG0_PRU0_GPO14        = 0x022CU,\n    PIN_PRG0_PRU0_GPO15        = 0x0230U,\n    PIN_PRG0_PRU0_GPO16        = 0x0234U,\n    PIN_PRG0_PRU0_GPO17        = 0x0238U,\n    PIN_PRG0_PRU0_GPO18        = 0x023CU,\n    PIN_PRG0_PRU0_GPO19        = 0x0240U,\n    PIN_PRG0_PRU1_GPO0         = 0x0244U,\n    PIN_PRG0_PRU1_GPO1         = 0x0248U,\n    PIN_PRG0_PRU1_GPO2         = 0x024CU,\n    PIN_PRG0_PRU1_GPO3         = 0x0250U,\n    PIN_PRG0_PRU1_GPO4         = 0x0254U,\n    PIN_PRG0_PRU1_GPO5         = 0x0258U,\n    PIN_PRG0_PRU1_GPO6         = 0x025CU,\n    PIN_PRG0_PRU1_GPO7         = 0x0260U,\n    PIN_PRG0_PRU1_GPO8         = 0x0264U,\n    PIN_PRG0_PRU1_GPO9         = 0x0268U,\n    PIN_PRG0_PRU1_GPO10        = 0x026CU,\n    PIN_PRG0_PRU1_GPO11        = 0x0270U,\n    PIN_PRG0_PRU1_GPO12        = 0x0274U,\n    PIN_PRG0_PRU1_GPO13        = 0x0278U,\n    PIN_PRG0_PRU1_GPO14        = 0x027CU,\n    PIN_PRG0_PRU1_GPO15        = 0x0280U,\n    PIN_PRG0_PRU1_GPO16        = 0x0284U,\n    PIN_PRG0_PRU1_GPO17        = 0x0288U,\n    PIN_PRG0_PRU1_GPO18        = 0x028CU,\n    PIN_PRG0_PRU1_GPO19        = 0x0290U,\n    PIN_PRG0_MDIO0_MDIO        = 0x0294U,\n    PIN_PRG0_MDIO0_MDC         = 0x0298U,\n    PIN_NMIN                   = 0x029CU,\n    PIN_RESETZ                 = 0x02A0U,\n    PIN_RESETSTATZ             = 0x02A4U,\n    PIN_PORZ_OUT               = 0x02A8U,\n    PIN_SOC_SAFETY_ERRORN      = 0x02ACU,\n    PIN_TDI                    = 0x02B0U,\n    PIN_TDO                    = 0x02B4U,\n    PIN_TMS                    = 0x02B8U,\n    PIN_USB0_DRVVBUS           = 0x02BCU,\n    PIN_USB1_DRVVBUS           = 0x02C0U,\n    PIN_MMC1_DAT3              = 0x02C4U,\n    PIN_MMC1_DAT2              = 0x02C8U,\n    PIN_MMC1_DAT1              = 0x02CCU,\n    PIN_MMC1_DAT0              = 0x02D0U,\n    PIN_MMC1_CLK               = 0x02D4U,\n    PIN_MMC1_CMD               = 0x02D8U,\n    PIN_MMC1_SDCD              = 0x02DCU,\n    PIN_MMC1_SDWP              = 0x02E0U,\n    PIN_I2C0_SCL               = 0x02E8U,\n    PIN_I2C0_SDA               = 0x02ECU,\n    PIN_I2C1_SCL               = 0x02F0U,\n    PIN_I2C1_SDA               = 0x02F4U,\n    PIN_ECAP0_IN_APWM_OUT      = 0x02F8U,\n    PIN_EXT_REFCLK1            = 0x02FCU,\n    PIN_TIMER_IO0              = 0x0300U,\n    PIN_TIMER_IO1              = 0x0304U,\n    PIN_PORZ                   = 0x0308U,\n};\n\nenum pinWkupOffsets\n{\n    PIN_MCU_OSPI0_CLK          = 0x0000U,\n    PIN_MCU_OSPI0_LBCLKO       = 0x0004U,\n    PIN_MCU_OSPI0_DQS          = 0x0008U,\n    PIN_MCU_OSPI0_D0           = 0x000CU,\n    PIN_MCU_OSPI0_D1           = 0x0010U,\n    PIN_MCU_OSPI0_D2           = 0x0014U,\n    PIN_MCU_OSPI0_D3           = 0x0018U,\n    PIN_MCU_OSPI0_D4           = 0x001CU,\n    PIN_MCU_OSPI0_D5           = 0x0020U,\n    PIN_MCU_OSPI0_D6           = 0x0024U,\n    PIN_MCU_OSPI0_D7           = 0x0028U,\n    PIN_MCU_OSPI0_CSN0         = 0x002CU,\n    PIN_MCU_OSPI0_CSN1         = 0x0030U,\n    PIN_MCU_OSPI1_CLK          = 0x0034U,\n    PIN_MCU_OSPI1_LBCLKO       = 0x0038U,\n    PIN_MCU_OSPI1_DQS          = 0x003CU,\n    PIN_MCU_OSPI1_D0           = 0x0040U,\n    PIN_MCU_OSPI1_D1           = 0x0044U,\n    PIN_MCU_OSPI1_D2           = 0x0048U,\n    PIN_MCU_OSPI1_D3           = 0x004CU,\n    PIN_MCU_OSPI1_CSN0         = 0x0050U,\n    PIN_MCU_OSPI1_CSN1         = 0x0054U,\n    PIN_MCU_RGMII1_TX_CTL      = 0x0058U,\n    PIN_MCU_RGMII1_RX_CTL      = 0x005CU,\n    PIN_MCU_RGMII1_TD3         = 0x0060U,\n    PIN_MCU_RGMII1_TD2         = 0x0064U,\n    PIN_MCU_RGMII1_TD1         = 0x0068U,\n    PIN_MCU_RGMII1_TD0         = 0x006CU,\n    PIN_MCU_RGMII1_TXC         = 0x0070U,\n    PIN_MCU_RGMII1_RXC         = 0x0074U,\n    PIN_MCU_RGMII1_RD3         = 0x0078U,\n    PIN_MCU_RGMII1_RD2         = 0x007CU,\n    PIN_MCU_RGMII1_RD1         = 0x0080U,\n    PIN_MCU_RGMII1_RD0         = 0x0084U,\n    PIN_MCU_MDIO0_MDIO         = 0x0088U,\n    PIN_MCU_MDIO0_MDC          = 0x008CU,\n    PIN_MCU_SPI0_CLK           = 0x0090U,\n    PIN_MCU_SPI0_D0            = 0x0094U,\n    PIN_MCU_SPI0_D1            = 0x0098U,\n    PIN_MCU_SPI0_CS0           = 0x009CU,\n    PIN_WKUP_UART0_RXD         = 0x00A0U,\n    PIN_WKUP_UART0_TXD         = 0x00A4U,\n    PIN_MCU_MCAN0_TX           = 0x00A8U,\n    PIN_MCU_MCAN0_RX           = 0x00ACU,\n    PIN_WKUP_GPIO0_0           = 0x00B0U,\n    PIN_WKUP_GPIO0_1           = 0x00B4U,\n    PIN_WKUP_GPIO0_2           = 0x00B8U,\n    PIN_WKUP_GPIO0_3           = 0x00BCU,\n    PIN_WKUP_GPIO0_4           = 0x00C0U,\n    PIN_WKUP_GPIO0_5           = 0x00C4U,\n    PIN_WKUP_GPIO0_6           = 0x00C8U,\n    PIN_WKUP_GPIO0_7           = 0x00CCU,\n    PIN_WKUP_GPIO0_8           = 0x00D0U,\n    PIN_WKUP_GPIO0_9           = 0x00D4U,\n    PIN_WKUP_GPIO0_10          = 0x00D8U,\n    PIN_WKUP_GPIO0_11          = 0x00DCU,\n    PIN_WKUP_I2C0_SCL          = 0x00E0U,\n    PIN_WKUP_I2C0_SDA          = 0x00E4U,\n    PIN_MCU_I2C0_SCL           = 0x00E8U,\n    PIN_MCU_I2C0_SDA           = 0x00ECU,\n    PIN_PMIC_POWER_EN1         = 0x00F0U,\n    PIN_MCU_SAFETY_ERRORN      = 0x00F4U,\n    PIN_MCU_RESETZ             = 0x00F8U,\n    PIN_MCU_RESETSTATZ         = 0x00FCU,\n    PIN_MCU_PORZ_OUT           = 0x0100U,\n    PIN_TCK                    = 0x0104U,\n    PIN_TRSTN                  = 0x0108U,\n    PIN_EMU0                   = 0x010CU,\n    PIN_EMU1                   = 0x0110U,\n    PIN_PMIC_POWER_EN0         = 0x0114U,\n};\n\n\n/* ========================================================================== */\n/*                            Global Variables                                */\n/* ========================================================================== */\n\n/** \\brief Pinmux configuration data for the board. Auto-generated from \n           Pinmux tool. */\nextern pinmuxBoardCfg_t gDRA80xMainPinmuxData[];\nextern pinmuxBoardCfg_t gDRA80xWkupPinmuxData[];\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n#endif /* _DRA80X_PIN_MUX_H_ */\n';
return __p
}; });
defineResource("/DRA80x_SR1.0/templates/Platform Development Kit (PDK)/DRA80x_pinmux_data.c.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var $legacy = pmux.getScript("/legacy/adapt.js")(pmux), assignmentErrors = $legacy.assignmentErrors, assignments = $legacy.assignments, peripheralConfigurables = $legacy.peripheralConfigurables, peripheralConfigurations = $legacy.peripheralConfigurations, selectedUseCases = $legacy.selectedUseCases, version = $legacy.version, deviceData = $legacy.deviceData;
 var date = new Date();
;
__p += '/**\n* Note: This file was auto-generated by TI PinMux on ' +
((__t = (date.toLocaleDateString())) == null ? '' : __t) +
' at ' +
((__t = (date.toLocaleTimeString())) == null ? '' : __t) +
'.\n*\n* \\file  DRA80x_pinmux_data.c\n*\n* \\brief  This file contains the pin mux configurations for the boards.\n*         These are prepared based on how the peripherals are extended on\n*         the boards.\n*\n* \\copyright Copyright (CU) ' +
((__t = (date.getFullYear())) == null ? '' : __t) +
' Texas Instruments Incorporated -\n*             http://www.ti.com/\n*/\n\n/* ========================================================================== */\n/*                             Include Files                                  */\n/* ========================================================================== */\n\n#include "DRA80x_pinmux.h"\n\n/** Peripheral Pin Configurations */\n\n';

    var capitalizeFirstLetterOnly = function( name ) {
        return name[0].toUpperCase() + name.substring( 1, name.length ).toLowerCase();
    };

    var getMappedInterface = function( assignment ) {
        // hack for maxwell
        // return assignment.interfaceName.substring(0, assignment.interfaceName.length-1);
        // hack for maxwell no longer needed
        return assignment.interfaceName;
    };

    var getPeripheralNum = function( assignment ) {
        // Look at the last character in the peripheral name.
        // If it's a number then we use that. Otherwise, use 0.

        var lastChar = parseInt( assignment.peripheral.name[ assignment.peripheral.name.length - 1 ] );
            if( isNaN( lastChar ) ) {
                return 0;
            }
        return lastChar;
    };

    var getMappedPeripheral = function( assignment ) {
        return getMappedInterface( assignment ) + getPeripheralNum( assignment );
    };

    var getPeripheralInstNum = function( assignment ) {
        var optionalParameters = getMappedPeripheral(assignment);
        // Look at the last character in the peripheral name.
        // If it's a number, then we use that.  Otherwise, use 0.
        if(optionalParameters == assignment.interfaceName)
        {
            var lastChar = parseInt( assignment.peripheral.name[ assignment.peripheral.name.length - 1 ] );
        }
        else
        {
            var lastChar = parseInt( optionalParameters[ optionalParameters.length - 1 ] );
        }
        if( isNaN( lastChar ) ) {
            return 0;
        }
        return lastChar;
    };

    var OPT_PARAM = function( assignment ) {
        // optional parameters for pinmuxing
        // For everything, return 0. Not used in Maxwell.

        return 0;
    }

    var PinOptions = function( assignment ) {
        var options = [];
        var notOptions = [];

        var addOption = function( option ) {
            if( option[0] === '~' ) {
                notOptions.push( option );
            } else {
                options.push( option );
            }
        };

        var IS_PULL_ENABLED = function() {
            if( assignment.pu || assignment.pd ) {
                return "~PIN_PULL_DISABLE";
            }
            return "PIN_PULL_DISABLE";
        };

        var PULL_TYPE = function() {
            if( assignment.pu ) {
                return "PIN_PULL_DIRECTION";
            }
            return "~PIN_PULL_DIRECTION";
        };

        var IS_RX_ACTIVE = function() {
            if( assignment.rx || assignment.RX) {
                return "PIN_INPUT_ENABLE";
            }
            return "~PIN_INPUT_ENABLE";
        };

        addOption( IS_PULL_ENABLED() );
        addOption( PULL_TYPE() );
        addOption( IS_RX_ACTIVE() );

        var formatOptions = function( optionsList, operator ) {
            if(optionsList.length == 0) {
                if (operator === " | ") {
                    var result = "(0x50000";
                }
                if (operator === " & ") {
                    var result = "(0x50000";
                }
            }
            else {
                var result = "(";
            }
            for( var i = 0; i < optionsList.length; ++i ) {
                result += optionsList[i];
                if( i != optionsList.length - 1 ) {
                    result += operator;
                }
            }
            result += ")";
            return result;
        };

        this.getOptions = function() {
            return formatOptions( options, " | " );
        }

        this.getNotOptions = function() {
            return formatOptions( notOptions, " & " );
        }
    }

    // First, we need to sort all pin assigments into their mapped interfaces/
    // peripherals.  This mapping isn't what pinmux knows, so we have to do it

    var mappedAssignments = {};
    for( var i = 0; i < assignments.length; ++i ) {
        if( "NOT FOUND" == assignments[i].devicePin.controlRegisterOffset ) {
            // do nothing with pins that have no pad configuration register
        } else {
            var interfaceName = getMappedInterface( assignments[i] );
            var peripheralName = getMappedPeripheral( assignments[i] );
            mappedAssignments[ interfaceName ] = mappedAssignments[ interfaceName ] || {};
            mappedAssignments[ interfaceName ][ peripheralName ] = mappedAssignments[ interfaceName ][ peripheralName ] || [];
            mappedAssignments[ interfaceName ][ peripheralName ].push( assignments[i] );
        }
    }

    var parseMux = function ( thisMux ) {
        if (thisMux > 14) {
			return thisMux;
        } else if (thisMux > 7) {
            return (thisMux - 8);
        }
        return thisMux;
    };
;
__p += '\n';


   _.each( mappedAssignments, function( peripherals, interfaceName ) {

       _.each( peripherals, function( pins, peripheralName ) {
;
__p += 'static pinmuxPerCfg_t g' +
((__t = (capitalizeFirstLetterOnly( peripheralName ))) == null ? '' : __t) +
'PinCfg[] =\n{\n';

var enumStatements = [];
for( var i = 0; i < pins.length; ++i ) {
    if ( undefined !== pins[i].devicePin.controlRegisterOffset && "NOT FOUND" !== pins[i].devicePin.controlRegisterOffset ) {
        var pinOptions = new PinOptions( pins[i] );
        enumStatements.push(
        {
            line1 : "/* " + pins[i].requirementName + " -> " + pins[i].peripheralPin.name + " -> " + pins[i].devicePin.ball + " */",
            line2 : "{",
            line3 : "    PIN_" + pins[i].devicePin.designSignalName.toUpperCase() + ", " + "PIN_MODE(" + parseMux(pins[i].muxMode) + ") | \\",
            line4 : "    (" + pinOptions.getOptions() + " & " + pinOptions.getNotOptions() + ")",
            line5 : "},"
        });
    }
}
 for( var i = 0; i < enumStatements.length; ++i ) {
;
__p += '    ' +
((__t = (enumStatements[i].line1)) == null ? '' : __t) +
'\n    ' +
((__t = (enumStatements[i].line2)) == null ? '' : __t) +
'\n    ' +
((__t = (enumStatements[i].line3)) == null ? '' : __t) +
'\n    ' +
((__t = (enumStatements[i].line4)) == null ? '' : __t) +
'\n    ' +
((__t = (enumStatements[i].line5)) == null ? '' : __t) +
'\n';
 }
;
__p += '    {PINMUX_END}\n};\n\n';
 });
;
__p += 'static pinmuxModuleCfg_t g' +
((__t = (capitalizeFirstLetterOnly( interfaceName ))) == null ? '' : __t) +
'PinCfg[] =\n{\n';
 _.each( peripherals, function( pins, peripheralName ) {
;
__p += '    {' +
((__t = (getPeripheralInstNum( pins[0] ))) == null ? '' : __t) +
', TRUE, g' +
((__t = (capitalizeFirstLetterOnly( peripheralName ))) == null ? '' : __t) +
'PinCfg},\n';
 });
;
__p += '    {PINMUX_END}\n};\n\n\n';
 });

var enumMainSet = [];
var enumWkupSet = [];
_.each( mappedAssignments, function( iface, interfaceName ) {
    if ( interfaceName.startsWith("WKUP") || interfaceName.startsWith("MCU") ) {
        enumWkupSet.push("g" + capitalizeFirstLetterOnly( interfaceName ) + "PinCfg");
    } else {
        enumMainSet.push("g" + capitalizeFirstLetterOnly( interfaceName ) + "PinCfg");
    }
});
;
__p += 'pinmuxBoardCfg_t gDRA80xMainPinmuxData[] =\n{\n';
   for( var i = 0; i < enumMainSet.length; ++i ) {
;
__p += '    {' +
((__t = (i)) == null ? '' : __t) +
', ' +
((__t = (enumMainSet[i])) == null ? '' : __t) +
'},\n';
   }
;
__p += '    {PINMUX_END}\n};\n\npinmuxBoardCfg_t gDRA80xWkupPinmuxData[] =\n{\n';
   for( var i = 0; i < enumWkupSet.length; ++i ) {
;
__p += '    {' +
((__t = (i)) == null ? '' : __t) +
', ' +
((__t = (enumWkupSet[i])) == null ? '' : __t) +
'},\n';
   }
;
__p += '    {PINMUX_END}\n};\n';
return __p
}; });
defineResource("/DRA80x_SR1.0/templates/csv/PinmuxConfigSummary.csv.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var $legacy = pmux.getScript("/legacy/adapt.js")(pmux), assignmentErrors = $legacy.assignmentErrors, assignments = $legacy.assignments;

var parseMux = function ( thisMux ) {
    if (thisMux > 14) {
        return thisMux;
    } else if (thisMux > 7) {
        return (thisMux - 8);
    }
    return thisMux;
	
};

var getRxEnable = function ( assignment ) {
	
    if (assignment.rx !== null) {
        return assignment.rx;
    } else if (assignment.RX !== null) {
        return assignment.RX;
    } 
	
	
    return assignment.rx;
};

;
__p += 'Design Signal Pad Name,IO Power Group,PUPD State During HHV,PUPD State After HHV,IO Power Supply Name,IO Power Setting,Required Voltage Level,Ball Name,Selected Mode Number,Mode Interface Name,Mode Signal Name,Mode Type,User Checked PU,User Checked PD,User Checked RX,User Requirement Name\n';
 for( var i = 0; i < assignments.length; ++i ) {
;
__p +=
((__t = (assignments[i].devicePin.designSignalName)) == null ? '' : __t) +
',' +
((__t = (assignments[i].devicePin.powerDomain.powerGroup)) == null ? '' : __t) +
',' +
((__t = (assignments[i].devicePin.pupdStateDuringHHV)) == null ? '' : __t) +
',' +
((__t = (assignments[i].devicePin.pupdStateAfterHHV)) == null ? '' : __t) +
',' +
((__t = (assignments[i].devicePin.powerDomain.name)) == null ? '' : __t) +
',' +
((__t = (assignments[i].powerSetting)) == null ? '' : __t) +
',' +
((__t = (assignments[i].requiredVoltageLevel)) == null ? '' : __t) +
',' +
((__t = (assignments[i].devicePin.ball)) == null ? '' : __t) +
',' +
((__t = (parseMux(assignments[i].muxMode))) == null ? '' : __t) +
',' +
((__t = (assignments[i].peripheral.name)) == null ? '' : __t) +
',' +
((__t = (assignments[i].peripheralPin.name)) == null ? '' : __t) +
',' +
((__t = (assignments[i].peripheralPin.interfacePin.receiver)) == null ? '' : __t) +
',' +
((__t = (assignments[i].pu)) == null ? '' : __t) +
',' +
((__t = (assignments[i].pd)) == null ? '' : __t) +
',' +
((__t = (getRxEnable(assignments[i]))) == null ? '' : __t) +
',' +
((__t = (assignments[i].requirementName)) == null ? '' : __t) +
'\n';
 }
;

return __p
}; });
defineResource("/DRA80x_SR1.0/templates/linux/devicetree.dtsi.xdt", function(_, system, pmux, scripting, require) { "use strict";return function(args) {
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }

 var $legacy = pmux.getScript("/legacy/adapt.js")(pmux), assignments = $legacy.assignments;

var groupedAssignmentsMAIN0 = {};
var groupedAssignmentsMAIN1 = {};
var groupedAssignmentsWKUP = {};
var notUsedAssignments = {};
_( assignments ).each( function( assignment ) {
	// Use the requirement name as the name, but lower case and _ instead of spaces
	
	var requirementName = assignment.requirementName.toLowerCase().replace( / /g, "_" );
	if( "NOT FOUND" !== assignment.devicePin.controlRegisterOffset ) {
		if ( _.includes(assignment.interfaceName, "WKUP") || _.includes(assignment.interfaceName, "MCU") ) {
			groupedAssignmentsWKUP[ assignment.interfaceName ] = groupedAssignmentsWKUP[ assignment.interfaceName ] || {};
			groupedAssignmentsWKUP[ assignment.interfaceName ][ requirementName ] = groupedAssignmentsWKUP[ assignment.interfaceName ][ requirementName ] || [];
			groupedAssignmentsWKUP[ assignment.interfaceName ][ requirementName ].push( assignment );
		} else {
			if ( assignment.devicePin.controlRegisterOffset > 0x2e0 ) {
				groupedAssignmentsMAIN1[ assignment.interfaceName ] = groupedAssignmentsMAIN1[ assignment.interfaceName ] || {};
				groupedAssignmentsMAIN1[ assignment.interfaceName ][ requirementName ] = groupedAssignmentsMAIN1[ assignment.interfaceName ][ requirementName ] || [];
				groupedAssignmentsMAIN1[ assignment.interfaceName ][ requirementName ].push( assignment );
			} else {
				groupedAssignmentsMAIN0[ assignment.interfaceName ] = groupedAssignmentsMAIN0[ assignment.interfaceName ] || {};
				groupedAssignmentsMAIN0[ assignment.interfaceName ][ requirementName ] = groupedAssignmentsMAIN0[ assignment.interfaceName ][ requirementName ] || [];
				groupedAssignmentsMAIN0[ assignment.interfaceName ][ requirementName ].push( assignment );
			}
		}
	} else {
		notUsedAssignments[ assignment.interfaceName ] = notUsedAssignments[ assignment.interfaceName ] || {};
		notUsedAssignments[ assignment.interfaceName ][ requirementName ] = {};
	}
} );

var getOffset = function( assignment ) {
	return ( assignment.devicePin.controlRegisterOffset ).toString( 16 ).toLowerCase();
};

var getOffset1 = function( assignment ) {
	// main_pmx1 device tree node starts at register address 0x0011c2e8
	// we subtract 0x2e8 so our offsets start over from 0x0

	var new_offset = ( assignment.devicePin.controlRegisterOffset - 0x2e8 ).toString( 16 ).toLowerCase();
	return "0x" + ("0000" + new_offset).substr(-4); // pad hex string with zeros
};

var getPinConfig = function( assignment ) {
	var result = "";
	
	if( assignment.rx || assignment.RX) {
		if( assignment.pu ) {
			result += "PIN_INPUT_PULLUP";
		}
		else if( assignment.pd ) {
			result += "PIN_INPUT_PULLDOWN";
		}
		else {
			result += "PIN_INPUT";
		}
	} else {
		if( assignment.pu ) {
			result += "PIN_OUTPUT_PULLUP";
		}
		else if( assignment.pd ) {
			result += "PIN_OUTPUT_PULLDOWN";
		}
		else {
			result += "PIN_OUTPUT";
		}
	}
	return result;
};

var getPinMuxMode = function( assignment ) {
	var thisMux = assignment.muxMode;
    if (thisMux > 14) {
        return ( thisMux ).toString ( 10 );
    } else if (thisMux > 7) {
        return ( thisMux - 8 ).toString ( 10 );
    }
    return ( thisMux ).toString ( 10 );
};

var getPinComment = function( assignment ) {
	if (assignment.devicePin.designSignalName == assignment.peripheralPin.name) {
		return "/* (" + assignment.devicePin.ball + ") " + assignment.devicePin.designSignalName + " */";
	} else {
		return "/* (" + assignment.devicePin.ball + ") " + assignment.devicePin.designSignalName + "." + assignment.peripheralPin.name + " */";
	}
};

var date = new Date();

;
__p += '/* This file was auto-generated by TI PinMux on ' +
((__t = (date.toLocaleDateString())) == null ? '' : __t) +
' at ' +
((__t = (date.toLocaleTimeString())) == null ? '' : __t) +
'. */\n/* This file should only be used as a reference. Some pins/peripherals, */\n/* depending on your use case, may need additional configuration. */\n\n';
 if( !_( notUsedAssignments ).isEmpty() ) {
;
__p += '/* Some or all of the pins from the following groups are not used by the device tree\n';
	_( notUsedAssignments ).each( function( iFace ) {
		_( iFace ).each( function( requirement, requirementName ) {
;
__p += '	' +
((__t = (requirementName)) == null ? '' : __t) +
'\n';
		} );
	} );
;
__p += '*/\n\n';
 }
 if( !_( groupedAssignmentsMAIN0 ).isEmpty() ) {
;
__p += '&main_pmx0 {\n';
	_( groupedAssignmentsMAIN0 ).each( function( iFace ) {
		_( iFace ).each( function( requirement, requirementName ) {
;
__p += '	' +
((__t = (requirementName)) == null ? '' : __t) +
'_pins_default: ' +
((__t = (requirementName)) == null ? '' : __t) +
'_pins_default {\n		pinctrl-single,pins = <\n';
			_( requirement ).each( function( assignment ) {
;
__p += '			AM65X_IOPAD(' +
((__t = (getOffset( assignment ))) == null ? '' : __t) +
', ' +
((__t = (getPinConfig( assignment ))) == null ? '' : __t) +
', ' +
((__t = (getPinMuxMode( assignment ))) == null ? '' : __t) +
') ' +
((__t = (getPinComment( assignment ))) == null ? '' : __t) +
'\n';
			} );
;
__p += '		>;\n	};\n\n';
		} );
	} );
;
__p += '};\n\n';
 }
 if( !_( groupedAssignmentsMAIN1 ).isEmpty() ) {
;
__p += '&main_pmx1 {\n';
	_( groupedAssignmentsMAIN1 ).each( function( iFace ) {
		_( iFace ).each( function( requirement, requirementName ) {
;
__p += '	' +
((__t = (requirementName)) == null ? '' : __t) +
'_pins_default: ' +
((__t = (requirementName)) == null ? '' : __t) +
'_pins_default {\n		pinctrl-single,pins = <\n';
			_( requirement ).each( function( assignment ) {
;
__p += '			AM65X_IOPAD(' +
((__t = (getOffset1( assignment ))) == null ? '' : __t) +
', ' +
((__t = (getPinConfig( assignment ))) == null ? '' : __t) +
', ' +
((__t = (getPinMuxMode( assignment ))) == null ? '' : __t) +
') ' +
((__t = (getPinComment( assignment ))) == null ? '' : __t) +
'\n';
			} );
;
__p += '		>;\n	};\n\n';
		} );
	} );
;
__p += '};\n\n';
 }
 if( !_( groupedAssignmentsWKUP ).isEmpty() ) {
;
__p += '&wkup_pmx0 {\n';
	_( groupedAssignmentsWKUP ).each( function( iFace ) {
		_( iFace ).each( function( requirement, requirementName ) {
;
__p += '	' +
((__t = (requirementName)) == null ? '' : __t) +
'_pins_default: ' +
((__t = (requirementName)) == null ? '' : __t) +
'_pins_default {\n		pinctrl-single,pins = <\n';
			_( requirement ).each( function( assignment ) {
;
__p += '			AM65X_WKUP_IOPAD(' +
((__t = (getOffset( assignment ))) == null ? '' : __t) +
', ' +
((__t = (getPinConfig( assignment ))) == null ? '' : __t) +
', ' +
((__t = (getPinMuxMode( assignment ))) == null ? '' : __t) +
') ' +
((__t = (getPinComment( assignment ))) == null ? '' : __t) +
'\n';
			} );
;
__p += '		>;\n	};\n\n';
		} );
	} );
;
__p += '};\n';
 }
;

return __p
}; });